var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#MuladdMacro.@muladd","page":"API","title":"MuladdMacro.@muladd","text":"@muladd\n\nConvert every combination of addition/subtraction and multiplication to a call of muladd.\n\nIf both of the involved operators are dotted, muladd is applied as a dot call. The order of summation might be changed.\n\n\n\n\n\n","category":"macro"},{"location":"#MuladdMacro.jl","page":"Home","title":"MuladdMacro.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides the @muladd macro. It automatically converts expressions with multiplications and additions or subtractions to calls with muladd which then fuse via FMA when it would increase the performance of the code. The @muladd macro can be placed on code blocks, and it will automatically find the appropriate expressions and nest muladd expressions when necessary. In mixed expressions, summands without multiplication will be grouped together and evaluated first, but otherwise the order of evaluation of multiplications and additions is not changed.","category":"page"},{"location":"#Tutorials-and-Documentation","page":"Home","title":"Tutorials and Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For information on using the package, see the stable documentation. Use the in-development documentation for the version of the documentation, which contains the unreleased features.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using MuladdMacro\n\njulia> @macroexpand(@muladd k3 = f(t + c3 * dt, @. uprev + dt * (a031 * k1 + a032 * k2)))\n:(k3 = f((muladd)(c3, dt, t), (muladd).(dt, (muladd).(a032, k2, (*).(a031, k1)), uprev)))\n\njulia> @macroexpand(@muladd integrator.EEst = integrator.opts.internalnorm((update -\n                                                                            dt * (bhat1 * k1 +\n                                                                             bhat4 * k4 +\n                                                                             bhat5 * k5 +\n                                                                             bhat6 * k6 +\n                                                                             bhat7 * k7 +\n                                                                             bhat10 * k10)) ./\n                                                                           @. (integrator.opts.abstol +\n                                                                               max(abs(uprev),\n           abs(u)) * integrator.opts.reltol)))\n:(integrator.EEst = integrator.opts.internalnorm((muladd)(-dt, (muladd)(bhat10, k10, (muladd)(bhat7, k7, (muladd)(bhat6, k6, (muladd)(bhat5, k5, (muladd)(bhat4, k4, bhat1 * k1))))), update) ./ (muladd).(max.(abs.(uprev), abs.(u)), integrator.opts.reltol, integrator.opts.abstol)))","category":"page"},{"location":"#Broadcasting","page":"Home","title":"Broadcasting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A muladd call will be broadcasted if both the * and the + or - are broadcasted. If either one is not broadcasted, then the expression will be converted to a non-dotted muladd.","category":"page"},{"location":"#Limitations","page":"Home","title":"Limitations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently, @muladd handles only explicit calls of + and *. In particular, assignments using += or literal power such as ^2 are not supported. Thus, you need to rewrite them, e.g.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using MuladdMacro\n\njulia> a = 1.0;\n       b = 2.0;\n       c = 3.0;\n\njulia> @macroexpand @muladd a += b * c # does not work\n:(a += b * c)\n\njulia> @macroexpand @muladd a = a + b * c # good alternative\n:(a = (muladd)(b, c, a))\n\njulia> @macroexpand @muladd a + b^2 # does not work\n:(a + b ^ 2)\n\njulia> @macroexpand @muladd a + b * b # good alternative\n:((muladd)(b, b, a))","category":"page"},{"location":"#Credit","page":"Home","title":"Credit","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Most of the credit goes to @fcard and @devmotion for building the first version and greatly refining the macro. These contributions are not directly shown as this was developed in Gitter chats and in the DiffEqBase.jl repository, but these two individuals did almost all the work.","category":"page"},{"location":"#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details><summary>The documentation of this SciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"}]
}
